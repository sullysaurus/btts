---
// Audio Player Component - Sleek top bar
---

<div id="audio-player" class="fixed top-0 left-0 right-0 z-50">
  <div class="relative bg-black/95 border-b border-white/10 backdrop-blur-xl">
    <!-- Animated glow effect -->
    <div class="absolute inset-0 bg-gradient-to-r from-blue-500/5 via-purple-500/5 to-blue-500/5"></div>

    <div class="relative z-10 container mx-auto px-4 md:px-6 py-2.5">
      <div class="flex items-center gap-3 md:gap-4">

        <!-- Song Info -->
        <div class="flex items-center gap-3 min-w-[160px] lg:min-w-[200px]">
          <div class="w-9 h-9 rounded-lg bg-gradient-to-br from-blue-500/20 to-purple-500/20 flex items-center justify-center border border-white/10">
            <i class="fas fa-music text-yellow-400 text-sm"></i>
          </div>
          <div class="flex-1 min-w-0 hidden sm:block">
            <p class="text-xs font-semibold text-white truncate" id="track-title">Track Title</p>
            <p class="text-[10px] text-white/50 truncate" id="track-artist">Back To The Start</p>
          </div>
        </div>

        <!-- Controls -->
        <div class="flex-1 flex items-center justify-center gap-3 md:gap-4">
          <button id="prev-btn" class="w-7 h-7 flex items-center justify-center text-white/50 hover:text-yellow-400 transition-colors duration-300 hidden sm:flex" aria-label="Previous track">
            <i class="fas fa-step-backward text-sm"></i>
          </button>

          <button id="play-btn" class="w-8 h-8 rounded-full bg-yellow-400 hover:bg-yellow-300 text-black flex items-center justify-center transition-all duration-300 hover:scale-110 shadow-md hover:shadow-yellow-400/50" aria-label="Play">
            <i class="fas fa-play ml-0.5 text-sm"></i>
          </button>

          <button id="pause-btn" class="hidden w-8 h-8 rounded-full bg-yellow-400 hover:bg-yellow-300 text-black items-center justify-center transition-all duration-300 hover:scale-110 shadow-md hover:shadow-yellow-400/50" aria-label="Pause">
            <i class="fas fa-pause text-sm"></i>
          </button>

          <button id="next-btn" class="w-7 h-7 flex items-center justify-center text-white/50 hover:text-yellow-400 transition-colors duration-300 hidden sm:flex" aria-label="Next track">
            <i class="fas fa-step-forward text-sm"></i>
          </button>

          <!-- Progress Bar -->
          <div class="flex-1 max-w-[300px] md:max-w-[400px] flex items-center gap-2">
            <span class="text-[10px] text-white/50 font-mono w-9 text-right hidden md:block" id="current-time">0:00</span>
            <div class="flex-1 h-1 bg-white/10 rounded-full overflow-hidden group cursor-pointer" id="progress-container">
              <div class="h-full bg-gradient-to-r from-yellow-400 to-yellow-300 rounded-full transition-all duration-150" id="progress-bar" style="width: 0%"></div>
            </div>
            <span class="text-[10px] text-white/50 font-mono w-9 hidden md:block" id="duration">0:00</span>
          </div>
        </div>

        <!-- Volume Control -->
        <div class="hidden lg:flex items-center gap-2 min-w-[100px]">
          <button id="volume-btn" class="w-7 h-7 flex items-center justify-center text-white/50 hover:text-yellow-400 transition-colors duration-300" aria-label="Mute">
            <i class="fas fa-volume-up text-sm"></i>
          </button>
          <div class="flex-1 h-1 bg-white/10 rounded-full overflow-hidden cursor-pointer" id="volume-container">
            <div class="h-full bg-gradient-to-r from-blue-400 to-purple-400 rounded-full transition-all duration-150" id="volume-bar" style="width: 80%"></div>
          </div>
        </div>

      </div>
    </div>

    <!-- Hidden audio element -->
    <audio id="audio-element" preload="metadata" autoplay>
      <source src="" type="audio/mpeg">
    </audio>
  </div>
</div>

<style>

  /* Custom progress bar interaction */
  #progress-container:hover #progress-bar {
    background: linear-gradient(to right, #fbbf24, #f59e0b);
  }

  #volume-container:hover #volume-bar {
    background: linear-gradient(to right, #60a5fa, #a78bfa);
  }
</style>

<script>
  // Audio Player Functionality
  const audioElement = document.getElementById('audio-element') as HTMLAudioElement;
  const playBtn = document.getElementById('play-btn');
  const pauseBtn = document.getElementById('pause-btn');
  const prevBtn = document.getElementById('prev-btn');
  const nextBtn = document.getElementById('next-btn');
  const progressContainer = document.getElementById('progress-container');
  const progressBar = document.getElementById('progress-bar');
  const currentTimeEl = document.getElementById('current-time');
  const durationEl = document.getElementById('duration');
  const volumeBtn = document.getElementById('volume-btn');
  const volumeContainer = document.getElementById('volume-container');
  const volumeBar = document.getElementById('volume-bar');
  const trackTitle = document.getElementById('track-title');
  const trackArtist = document.getElementById('track-artist');

  // Sample playlist
  const playlist = [
    {
      title: "Back To The Start",
      artist: "Coldplay Tribute",
      src: "/track.mp3"
    }
  ];

  let currentTrackIndex = 0;

  // Load track
  function loadTrack(index: number) {
    const track = playlist[index];
    if (audioElement && track) {
      audioElement.src = track.src;
      if (trackTitle) trackTitle.textContent = track.title;
      if (trackArtist) trackArtist.textContent = track.artist;
    }
  }

  // Play/Pause
  playBtn?.addEventListener('click', () => {
    audioElement?.play();
    playBtn?.classList.add('hidden');
    pauseBtn?.classList.remove('hidden');
  });

  pauseBtn?.addEventListener('click', () => {
    audioElement?.pause();
    pauseBtn?.classList.add('hidden');
    playBtn?.classList.remove('hidden');
  });

  // Auto-show pause button when playing
  audioElement?.addEventListener('play', () => {
    playBtn?.classList.add('hidden');
    pauseBtn?.classList.remove('hidden');
  });

  audioElement?.addEventListener('pause', () => {
    pauseBtn?.classList.add('hidden');
    playBtn?.classList.remove('hidden');
  });

  // Previous/Next
  prevBtn?.addEventListener('click', () => {
    currentTrackIndex = (currentTrackIndex - 1 + playlist.length) % playlist.length;
    loadTrack(currentTrackIndex);
    audioElement?.play();
    playBtn?.classList.add('hidden');
    pauseBtn?.classList.remove('hidden');
  });

  nextBtn?.addEventListener('click', () => {
    currentTrackIndex = (currentTrackIndex + 1) % playlist.length;
    loadTrack(currentTrackIndex);
    audioElement?.play();
    playBtn?.classList.add('hidden');
    pauseBtn?.classList.remove('hidden');
  });

  // Update progress bar
  audioElement?.addEventListener('timeupdate', () => {
    if (audioElement.duration) {
      const progress = (audioElement.currentTime / audioElement.duration) * 100;
      if (progressBar) progressBar.style.width = `${progress}%`;
      if (currentTimeEl) currentTimeEl.textContent = formatTime(audioElement.currentTime);
    }
  });

  // Update duration
  audioElement?.addEventListener('loadedmetadata', () => {
    if (durationEl && audioElement.duration) {
      durationEl.textContent = formatTime(audioElement.duration);
    }
  });

  // Seek functionality
  progressContainer?.addEventListener('click', (e) => {
    const rect = progressContainer.getBoundingClientRect();
    const percent = (e.clientX - rect.left) / rect.width;
    if (audioElement.duration) {
      audioElement.currentTime = percent * audioElement.duration;
    }
  });

  // Volume control
  volumeContainer?.addEventListener('click', (e) => {
    const rect = volumeContainer.getBoundingClientRect();
    const percent = (e.clientX - rect.left) / rect.width;
    audioElement.volume = percent;
    if (volumeBar) volumeBar.style.width = `${percent * 100}%`;
  });

  volumeBtn?.addEventListener('click', () => {
    if (audioElement.volume > 0) {
      audioElement.volume = 0;
      if (volumeBar) volumeBar.style.width = '0%';
      if (volumeBtn.querySelector('i')) {
        volumeBtn.querySelector('i')!.className = 'fas fa-volume-mute';
      }
    } else {
      audioElement.volume = 0.8;
      if (volumeBar) volumeBar.style.width = '80%';
      if (volumeBtn.querySelector('i')) {
        volumeBtn.querySelector('i')!.className = 'fas fa-volume-up';
      }
    }
  });

  // Auto-play next track when current ends
  audioElement?.addEventListener('ended', () => {
    currentTrackIndex = (currentTrackIndex + 1) % playlist.length;
    loadTrack(currentTrackIndex);
    audioElement?.play();
  });

  // Format time helper
  function formatTime(seconds: number): string {
    const mins = Math.floor(seconds / 60);
    const secs = Math.floor(seconds % 60);
    return `${mins}:${secs.toString().padStart(2, '0')}`;
  }

  // Initialize
  loadTrack(0);
  audioElement.volume = 0.8;

  // Autoplay on load (with user interaction fallback for browser policies)
  document.addEventListener('DOMContentLoaded', () => {
    audioElement?.play().catch(() => {
      // Autoplay blocked - wait for user interaction
      console.log('Autoplay blocked, waiting for user interaction');
    });
  });
</script>
